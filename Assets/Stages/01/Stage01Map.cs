// Stage01Map.cs
using UnityEngine;

// MapDefinitionBaseを継承する
public class Stage01Map : MapDefinitionBase
{

    
    //Stage1ルール:
    // 編集可能回数は4回

    // 定義: 
    // 0=空白, 1=通常, 2=スタート, 3=ゴール
    // 4=↑, 5=→, 6=↓, 7=←

    // このステージのマップ配列を定義 （ここのみいじればおｋ）
    private readonly int[,] map = new int[,] {  

    /*   0   1   2   3   4   5   6   7   8   9  10  11  12  13*/
/*0*/   {0,  0,  0,  0,  0, -1, -1,  0,  0,  0,  0,  0,  0,  0},
/*1*/   {0,  0,  0,  0, -1, -1,  1, -1,  0,  0,  0,  0,  0,  0},
/*2*/   {0,  0,  0, -1, -1,  1,  3,  1, -1,  0,  0,  0,  0,  0},   //{2,6}ゴール  
/*3*/   {0,  0,  0, -1, -1, -1,  1, -1, -1,  0,  0,  0,  0,  0},
/*4*/   {0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0},
/*5*/   {0,  0, -1, -1, -1, -5, -1, -5, -1, -1, -1, -1,  0,  0},
/*6*/   {0, -1, -1,  4, -5, -1,  4, -1, -5,  4, -1, -1, -1,  0},   //{6,3}は方向変換可能     {6,6}は方向変換可能    {6,9}は方向変換可能
/*7*/   {-1,-1, -1, -1, -1, -5, -1, -5, -1, -1, -1, -5, -5, -1},
/*8*/   {-1,-5, -1, -1, -5, -1, -5, -1, -5, -1, -5, -5,  0,  0},
/*9*/   {-1, 0, -1, -1, -1, -5, -1, -5, -1, -1, -5,  0,  0,  0},
/*10*/  {0,  0,  0,  6, -1, -1,  6, -1, -1,  6,  0,  0,  0,  0},   //{10,3}は方向変換可能    {10,6}は方向変換可能    {10,9}は方向変換可能 
/*11*/  {0,  0,  0,  0, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0},
/*12*/  {0,  0,  0,  0,  0, -1, -1,  0,  0,  0,  0,  0,  0,  0},
/*13*/  {0,  0,  0,  0, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0},
/*14*/  {0,  0,  0, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0},
/*15*/  {0,  0, -1, -1, -5, -5,  2, -5, -1, -1,  0,  0,  0,  0},   //{15,6}スタート
/*16*/  {0,  0, -1, -5,  0,  0,  0,  0, -5, -1,  0,  0,  0,  0},
/*17*/  {0,  0, -1,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0},
/*18*/  {0, -1,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0}




    };


    private readonly int[,] editableMap = new int[,] {
        // 0=編集不可, 1=矢印タイル全向き変更可, 2,3,4,5=それぞれ上右下左のみ変更不可
        
        
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0}, //{10,6}は上のみ変更不可
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
       
    };

    // 基底クラスの抽象プロパティを実装して、定義したmapを返す
    public override int[,] Map => map;
    public override int[,] EditableMap => editableMap;
}