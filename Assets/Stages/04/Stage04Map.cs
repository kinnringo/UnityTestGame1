// Stage01Map.cs
using UnityEngine;

// MapDefinitionBaseを継承する
public class Stage04Map : MapDefinitionBase
{

    
    //Stage1ルール:
    // 編集可能回数は4回

    // 定義: 
    // 0=空白, 1=通常, 2=スタート, 3=ゴール
    // 4=↑, 5=→, 6=↓, 7=←

    // このステージのマップ配列を定義 （ここのみいじればおｋ）
    private readonly int[,] map = new int[,] {
        {90,1,90, 0, 0, 0, 0},          
        {1, 1, 3, 0, 0, 0, 0},       
        {1, 1,31, 0, 0, 0, 0},          
        {1, 1, 1, 0,91, 0, 0},  
        {1, 1, 1, 0, 1, 0, 0},
        {1, 1, 1, 0,21, 0, 0},  
        {2, 1, 1, 0, 1, 0, 0},
        {0, 0,11, 0,10, 0, 0}   
    };

    private readonly int[,] editableMap = new int[,] {
        // 0=編集不可, 
        // 1~9矢印タイル：1=矢印タイル全向き変更可, 2,3,4,5=それぞれ上右下左のみ変更不可
        // 10~19変数タイル：10=3つ全部変更可能、11,12,13=それぞれ変数(宝石)、演算子、値のみ変更可能
        // 20~29if文タイル：20=3つ全部変更可能、21,22,23=それぞれ変数(宝石)、演算子、値のみ変更可能
        {0, 0, 0, 0, 0, 0, 0},          
        {0, 0, 0, 0, 1, 0, 1},        
        {0, 0, 0, 0, 0, 0, 0},          
        {0, 0, 0, 0, 0, 0, 0},  
        {0, 0, 0, 0, 0, 0, 0},
        {0, 0,20, 0,10, 0, 0}, 
        {0, 0, 0, 0, 0, 0, 0},  
        {0, 0, 0, 0, 0, 0, 0}   
    };

    // 基底クラスの抽象プロパティを実装して、定義したmapを返す
    public override int[,] Map => map;
    public override int[,] EditableMap => editableMap;
}